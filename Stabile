#include <stdlib.h>
#include <stdio.h>
#include <string.h>
int LIM=0;
int uSTACKLIM=0;
int rSTACKLIM=0;
int SAVER=0;

typedef struct comando{
    long int p1;
    long int p2;
    char par;
}cmd;

typedef struct Stack {
    int finish;
    cmd instruction;
    struct Stack *next;
} uStack;

void CreateStack(struct Stack *s){
    s = NULL;
}

int Empty(struct Stack *s){
    if (s==NULL) return 0;
    else return 1;
}

struct Stack* FlushStack(struct Stack *s){
    while (s!=NULL){
        s=s->next;
    }
    return s;
}

struct Stack* UNDO;
struct Stack* REDO;

//Funzione push
struct Stack* push(struct Stack *head,cmd elem)
{
    struct Stack* tmp = (struct Stack*)malloc(sizeof(struct Stack));
    tmp->instruction = elem;
    tmp->next = head;
    head = tmp;
    return head;
}


//Funzione pop
struct Stack* pop(struct Stack *head,cmd* element)
{
    element->p1=head->instruction.p1;
    element->p2=head->instruction.p2;
    element->par=head->instruction.par;

    head=head->next;
    return head;
}

//Creazione struttura
char ** Create2D(ssize_t Strings)
{
    int i;
    char **a = {0};
    a = calloc(Strings, sizeof(char *));

    for(i=0;i<Strings; i++)
    {
        a[i]=NULL;

    }
    return a;
}

//Riallocazione in caso di saturazione
char ** Reallocation2D(char ** a, size_t dim, size_t molt){
    int i;
    char **b = {0};
    b = calloc(dim*molt+1, sizeof(char *));

    for (i=0; i<dim*molt+1; i++){
        b[i]=NULL;
    }

    for(i=0;i<dim;i++){
        b[i]=a[i];
    }

    free(a);

    return b;
}



//FUNZIONE PER UNDO DELLA CHANGE
void changeundo(cmd comando, char **array, char **temp,int finish){
    int i=comando.p1, k=comando.p2;


    while (i<=k){
        char* tmp=array[k];
        array[k]=temp[finish];
        temp[finish]=tmp;
        k--;
        finish--;
    }
}

//FUNZIONE PER UNDO DELLA DELETE
void insert(cmd comando, char **array, char** temp, int dim,int finish) {
    int i = comando.p1, k = comando.p2;
    int gap=k-i+1,o=1;

    //se il comando è nullo esco dalla funzione
    if (i==0 && k==0) return;


    while (o<=dim){
        if (array[o]!=NULL) o++;
        else break;
    }

    gap=o+gap;

    while (i<=o){
        array[gap]=array[o];
        gap--;
        o--;
    }

    while (i<=k){
        array[k]=temp[finish];
        k--;
        finish--;
    }

}


//FUNZIONE PER REDO DELLA DELETE
void deleteredo(cmd comando, char **array, int dim){
    int i=comando.p1, k=comando.p2;
    int j=1;

    if ((i==0 && k==0) || (i==k && (array[i])==NULL)) return;

    while(dim>=(k+j)){
        array[i]=array[k+j];
        i++;
        j++;
    }

    while(i<=dim){
        array[i]=NULL;
        i++;
    }
}

//COMANDO DELETE
void delete(cmd comando,char **array,char **temp, int dim){
    int i=comando.p1, k=comando.p2;
    int j=1;
    int o=k,eof=1;
    if (i==0 && k==0) {
        UNDO=push(UNDO,comando);
        UNDO->finish=0;
        uSTACKLIM=uSTACKLIM+1;
        return;
    }

    //Controllo la validità dell'intervallo

    while(i<=o){
        if (array[o]==NULL) k--;
        o--;
    }
    o=k;

    SAVER=k-(comando.p2-comando.p1);

    if (i<=k && (array[i])==NULL) eof=0;

    //Aggiusto il comando (in caso ci siano comandi nulli o con intervalli non corretti)
    comando.p2=k;

    while(i<=k){
        if(eof==0)break;
        temp[LIM]=array[i];
        LIM++;
        i++;
    }

    if (eof==0){
        comando.p1=0;
        comando.p2=0;
        UNDO=push(UNDO,comando);
        UNDO->finish=0;
        uSTACKLIM=uSTACKLIM+1;
        return;
    }
    else {
        i=comando.p1;
        UNDO=push(UNDO,comando);
        UNDO->finish=LIM-1;
        uSTACKLIM=uSTACKLIM+1;
    }

    //scalo k per rendere l'intervallo effettivo

    while(dim>=(k+j)){
        array[i]=array[k+j];
        i++;
        j++;

    }
    i=comando.p1;

    j=dim-((o-i)+1);

    while(j<=dim)
    {
        array[j]=NULL;
        j++;
    }
}


//COMANDO CHANGE
void change(cmd comando, char **array, char **temp, FILE *fp){
    size_t bufsize = 1024;
    int i=comando.p1, k=comando.p2;
    int strln;
    if (k>SAVER) SAVER=k;
    
    UNDO=push(UNDO,comando);
    uSTACKLIM=uSTACKLIM+1;
    char string[1024];

    while(i<=k){
        fgets(string,bufsize,fp);
        temp[LIM]=array[i];
        strln=strlen(string);
        string[strln-1]='\0';
        array[i]=malloc(strln+1);
        memmove(array[i],string,strln+1);
        i++;
        LIM++;
    }

    UNDO->finish=LIM-1;

}




//COMANDO UNDO
void undo(cmd comando, char **array,char **temp, int dim){
    cmd elem;
    long int i=0,k=comando.p1;
    int f;
    while (i<k){
        if (Empty(UNDO)==0) {
            break;}
        else {
            f=UNDO->finish;
            UNDO=pop(UNDO,&elem);
            uSTACKLIM=uSTACKLIM-1;
            REDO=push(REDO,elem);
            rSTACKLIM=rSTACKLIM+1;
            REDO->finish=f;
        }
        if (elem.par=='c') changeundo(elem,array,temp,f);
        else if (elem.par=='d') insert(elem,array,temp,dim,f);
        i++;
    }
}


//COMANDO REDO
void redo(cmd comando, char **array,char **temp, int dim){
    cmd elem;
    long int i=0, k=comando.p1;
    int f;

    while (i<k){
        //controllo se è vuoto
        if(Empty(REDO)==0){
            break;
        }
        else {
            //pop della REDO
            f=REDO->finish;
            REDO=pop(REDO,&elem);
            rSTACKLIM=rSTACKLIM-1;
            //push della UNDO
            UNDO=push(UNDO,elem);
            uSTACKLIM=uSTACKLIM+1;
            UNDO->finish=f;
        }

        if (elem.par=='c') changeundo(elem,array,temp,f);
        else if (elem.par=='d') deleteredo(elem,array,dim);
        i++;
    }
}

//COMANDO PRINT
void print(cmd comando,char **array){
    int i=comando.p1, k=comando.p2;
    while(i<=k){
        if (array[i]==NULL) printf(".\n");
        else puts(array[i]);
        i++;
    }
}



cmd GetOrder(FILE *fp){
    size_t bufsize = 1024;
    char *string;
    cmd istr;
    string = malloc(1024*sizeof(char));
    fgets(string,bufsize, fp);

    int i=0,j=0,k=0;
    char value1[50],value2[50];

    while(1) {
        if (string[k] == 'c' || string[k] == 'p' || string[k] == 'r' || string[k] == 'u' || string[k] == 'd' ||
            string[k] == '.' || string[k] == 'q') {
            istr.par = string[k];
            break;
        }
        k++;
    }

    if (istr.par=='.'||istr.par=='q') {
        istr.p1=0;
        istr.p2=0;
        return istr;
    }


    else {
        while (1) {
            if (string[i] == ',' || string[i] == 'r' || string[i] == 'u') break;
            value1[i] = string[i];
            i++;
        }
        value1[i] = '\0';

        if (istr.par == 'u' || istr.par == 'r') {
            istr.p1 = atoi(value1);
            istr.p2=0;
        }
        else {
            while (string[i] != istr.par) {
                i++;
                if (string[i] == istr.par) break;
                value2[j] = string[i];
                j++;
            }
            value2[j] = '\0';

            istr.p1 = atoi(value1);
            istr.p2 = atoi(value2);

        }
    }
    free(string);

    return istr;
}


cmd undocontrol(FILE *fp,char** ar, char **tmp,cmd istr,int sum,int dim){
    cmd istr2;
    istr2=GetOrder(fp);

    if (istr2.par=='u') {
        sum=sum+istr2.p1;
        if (sum>uSTACKLIM) sum=uSTACKLIM;
        istr2=undocontrol(fp,ar,tmp,istr2,sum,dim);
    }
    else if (istr2.par=='r'){
        sum=sum-istr2.p1;

        if (sum<(rSTACKLIM*-1)) {
            sum=rSTACKLIM*-1;
            istr2=undocontrol(fp,ar,tmp,istr2,sum,dim);
        }
        else istr2=undocontrol(fp,ar,tmp,istr2,sum,dim);
    }
    else if (istr2.par=='p'){
        istr.p1 = sum;
        if (istr.p1 >= 0) undo(istr, ar, tmp, dim);
        else {
            istr.p1 = istr.p1 * -1;
            redo(istr, ar, tmp, dim);
        }
        print(istr2,ar);
        istr2=GetOrder(fp);
        if (istr2.par=='u'){
            if(istr2.p1>uSTACKLIM) istr2.p1=uSTACKLIM;
            istr2=undocontrol(fp,ar,tmp,istr2,istr2.p1,dim);
        }
        else if (istr.par=='r'){
            if(istr2.p1>rSTACKLIM) istr2.p1=(rSTACKLIM);
            istr2=undocontrol(fp,ar,tmp,istr2,istr2.p1*-1,dim);
        }
    }
    else{
        istr.p1 = sum;
        if (istr.p1 >= 0) undo(istr, ar, tmp, dim);
        else {
            istr.p1 = istr.p1 * -1;
            redo(istr, ar, tmp, dim);
        }
    }
    return istr2;

}

void interpreter(cmd comando,char** ar, char **tmp, FILE *fp,int dim){

    if (comando.par=='c')
        change(comando,ar,tmp,fp);
    else if (comando.par=='p')
        print(comando,ar);
    else if (comando.par=='d')
        delete(comando,ar,tmp,dim);
    else if (comando.par=='r')
        redo(comando,ar,tmp,dim);
}


int main() {
    FILE *fp;
    cmd istruzione;
    int dim = 10, dim2=20;
    char **Array = {0};
    char **Temp = {0};
    Array = Create2D(dim);
    Temp = Create2D(dim2);
    CreateStack(UNDO);
    CreateStack(REDO);
    fp = stdin;

    do {
        int molt = 0;

        if (istruzione.par=='c' || istruzione.par=='d') {
            REDO=FlushStack(REDO);
            rSTACKLIM=0;
        }

        istruzione = GetOrder(fp);

        if (istruzione.par=='u'){
            if(istruzione.p1>uSTACKLIM) istruzione.p1=uSTACKLIM;
            istruzione=undocontrol(fp,Array,Temp,istruzione,istruzione.p1,dim);
        }
        else if (istruzione.par=='r'){
            if(istruzione.p1>rSTACKLIM) istruzione.p1=(rSTACKLIM);
            istruzione=undocontrol(fp,Array,Temp,istruzione,istruzione.p1*-1,dim);
        }


        if (istruzione.p2+1>dim) {
            molt = ((istruzione.p2/(dim-1)) + 2);
            Array = Reallocation2D(Array, dim, molt);
            dim = dim * molt;
        }

        if (dim2<(LIM+(istruzione.p2-istruzione.p1+1))) {
            molt = ((LIM + (istruzione.p2-istruzione.p1+1)) / (dim2-1)) + 2;
            Temp = Reallocation2D(Temp, dim2, molt);
            dim2=dim2*molt;
        }

        interpreter(istruzione, Array,Temp, fp,dim);

    }while (istruzione.par != 'q');

    free(Array);
    free(Temp);

    return 0;
}
