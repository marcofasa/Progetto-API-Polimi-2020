#include <stdlib.h>
#include <stdio.h>
#include <string.h>

 typedef struct comando{
int p1;
int p2;
char par;
    }cmd;

 void change(cmd comando){
   printf("changee da %c a %c\n", comando.p1,comando.p2);
 }
 void undo(cmd comando){
   printf("undo da %c\n", comando.p1);
 }
 void redo(cmd comando){
   printf("redo da %c\n", comando.p1);
 }


 void pLine(cmd comando){ 
    printf("print da %c a %c\n", comando.p1, comando.p2);   
}

 cmd GetOrder(FILE *fp){
    size_t bufsize = 32;
    char *buffer=NULL;
    char *string;
    char start,finish, order;

    cmd istr;

     

    getline(&buffer, &bufsize, fp);
    string = malloc(strlen(buffer) + 1);
    strcpy(string, buffer);
    start= string[0];
    if (string[0]=='q') {
      istr.par=0;
    }
    if (string[1]== 'u'){ //printf("undo");
         istr.p1=string[0];
         istr.par=string[1];}
    else if (string[1]=='r') {//printf("redo");
    istr.p1=string[0];
         istr.par=string[1];}
    else {
     // printf("par 1 %c\n", string[0]);
     // printf("par 2 %c\n", string[2]);
     // printf("comando %c\n", string[3]);
      istr.p1=string[0];
      istr.p2=string[2];
      istr.par=string[3];
    }
  return istr;
 }


 void interpretor(cmd comando){
    
    if (comando.par=='c')
       change(comando);
    else if (comando.par=='u')
       undo(comando);
    else if (comando.par=='r')
      redo(comando);
    else if (comando.par=='p')
      pLine(comando);
 }


int main(void) {
    FILE *fp;
    char **array;
    size_t bufsize = 32;
    array = malloc(bufsize * sizeof(char*));
    char *buffer=NULL;
    buffer = (char *) malloc(bufsize * sizeof(char));
    int i=0;
    char eof[]="q";

  cmd istruzione;

    fp=fopen("prova.txt", "rt");

 do {
        istruzione=GetOrder(fp);
        interpretor(istruzione);
    }while(istruzione.par!=0);

    return 0;

}
