#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define H 50
#define MAX_STRING_SIZE 1024

 typedef struct comando{
int p1;
int p2;
char par;
    }cmd;

 void change(cmd comando, const char arr[H][MAX_STRING_SIZE], FILE *fp){
    size_t bufsize = 32;
    char *buffer=NULL;
    buffer = (char *) malloc(bufsize * sizeof(char));
    int i=comando.p1, k=comando.p2;
    //printf("change da %d a %d\n", comando.p1,comando.p2);
    char eof[]="q";

    while(i<=k){
      getline(&buffer, &bufsize, fp);
      if (strcmp(buffer,eof)==0) break;
      strcpy(arr[i], buffer);
      i++;
    }
 }
 void undo(cmd comando){
   printf("undo da %d\n", comando.p1);
 }
 void redo(cmd comando){
   printf("redo da %d\n", comando.p1);
 }


 void print(cmd comando, const char arr[H][MAX_STRING_SIZE]){ 
   int i=comando.p1, k=comando.p2;
   printf("print da %d a %d\n", comando.p1, comando.p2);
    while(i<=k){
      if (i==0) {
        printf(".\n");
        i++;
        continue;
      }
      printf("%s", arr[i]);
      i++;
    }
}

 cmd GetOrder(FILE *fp){
    size_t bufsize = 32;
    char *buffer=NULL;
    char *string;
    char start,finish,order;
    cmd istr;

    getline(&buffer, &bufsize, fp);
    string = malloc(strlen(buffer) + 1);
    strcpy(string, buffer);
    start= string[0];
    char skip[]="q";

    if (string==skip) {
      istr.par=0;
    }
    if (string[0]=='.') {
      istr.par=string[0];
      }
    if (string[1]== 'u'){ //printf("undo");
         istr.p1=atoi(&string[0]);
         istr.par=string[1];
         }
    else if (string[1]=='r') {//printf("redo");
         istr.p1=atoi(&string[0]);
         istr.par=string[1];
         }
    else {
      istr.p1=atoi(&string[0]);
      istr.p2=atoi(&string[2]);
      istr.par=string[3];
    }
  return istr;
 }


 void interpreter(cmd comando,const char arr[H][MAX_STRING_SIZE], FILE *fp){
    
    if (comando.par=='c')
       change(comando,arr,fp);
    else if (comando.par=='u')
       undo(comando);
    else if (comando.par=='r')
       redo(comando);
    else if (comando.par=='p')
       print(comando,arr);
    
 }


int main(void) {
    FILE *fp;
    char array[H][MAX_STRING_SIZE];
    size_t bufsize = 32;
    char *buffer=NULL;
    buffer = (char *) malloc(bufsize * sizeof(char));
    cmd istruzione;
    

    fp=fopen("prova.txt", "rt");

    istruzione=GetOrder(fp);
    interpreter(istruzione,array,fp);

 while(istruzione.par!=0){
        istruzione=GetOrder(fp);
        interpreter(istruzione,array,fp);
        istruzione.par='z';
    }
  free(array);
  return 0;
}
