#include <stdlib.h>
#include <stdio.h>
#include <string.h>

typedef struct comando{
    long int p1;
    long int p2;
    char par;
}cmd;

char ** Create2D(ssize_t Strings)
{
    int i;
    char **a = {0};
    a = calloc(Strings, sizeof(char *));
    char point[]=".\n";

    for(i=0;i<Strings; i++)
    {
        a[i] = calloc(1024 , sizeof(char));
        strcpy(a[i],point);
    }
    return a;
}

char ** Reallocation2D(char ** a, size_t dim, size_t molt){
    int i;
    char **b = {0};
    b = calloc(dim*molt+1, sizeof(char *));
    char point[]=".\n";

    for(i=0;i<dim;i++){
        b[i]=a[i];
    }

    for (i=dim; i<dim*molt+1; i++){
        b[i] = calloc(1024, sizeof(char));
        strcpy(b[i],point);
    }

    free(a);

    return b;
}

void change(cmd comando, char **array, FILE *fp){
    size_t bufsize = 1024;
    char *buffer, * string;
    buffer = (char *) malloc(1024);
    long int i=comando.p1, k=comando.p2;
    //printf("change da %d a %d\n", comando.p1,comando.p2);
    char eof[2]="q";
   // printf("---------------------------\n");
   // printf("%d-->%d\n", i , k);
    string = malloc(1024*sizeof(char));

    while(i<=k){
        fgets(array[i],bufsize, fp);
        //if (strcmp(buffer,eof)==0) break;
        //printf("%i->>>%s \n", i,buffer);
        //strcpy(array[i], buffer);
        //printf("%s", string);
        //strncpy(string, buffer, sizeof(buffer)+1);
        //array[i]=buffer;
        //printf("%s", array[i]);
        i++;
    }

}
void undo(cmd comando){
    //printf("undo da %d\n", comando.p1);
}
void redo(cmd comando){
    //printf("redo da %d\n", comando.p1);
}


void print(cmd comando,char **array){
    long int i=comando.p1, k=comando.p2;
    //printf("%x\n", array+1);
    //printf("%d", array[0]);
    //printf("print da %d a %d\n", comando.p1, comando.p2);
    while(i<=k){
        printf("%s", array[i]);
        i++;
    }
}

cmd GetOrder(FILE *fp){
    size_t bufsize = 1024;
    char *buffer=NULL;
    char *string;
    cmd istr;
    string = malloc(1024);
    fgets(string,bufsize, fp);

    int i=0,j=0,k=0;
    char value1[10],value2[10];

    while(1) {
        if (string[k] == 'c' || string[k] == 'p' || string[k] == 'r' || string[k] == 'u' || string[k] == 'd' ||
            string[k] == '.' || string[k] == 'q') {
            istr.par = string[k];
            break;
        }
        k++;
    }

    if (istr.par=='.'||istr.par=='q') return istr;


    if (istr.par == 'u'){
        istr.p1=atoi(&string[0]);
        istr.par=string[1];
    }
    else if (istr.par =='r') {
        istr.p1=atoi(&string[0]);
        istr.par=string[1];
    }
    else {
        while(1){
            if (string[i]==',') break;
            value1[i]=string[i];
            i++;
        }
        value1[i]='\0';

        while (string[i]!=istr.par){
            i++;
            if (string[i]==istr.par) break;
            value2[j]=string[i];
            j++;
        }
        value2[j]='\0';

        istr.p1=atoi(value1);
        istr.p2=atoi(value2);
    }
    return istr;
}


void interpreter(cmd comando,char** ar, FILE *fp){

    if (comando.par=='c')
        change(comando,ar,fp);
    else if (comando.par=='u')
        undo(comando);
    else if (comando.par=='r')
        redo(comando);
    else if (comando.par=='p')
        print(comando,ar);

}


int main() {
    FILE *fp;
    cmd istruzione;
    int dim = 5;
    char **Array = {0};
    Array = Create2D(dim);

    fp = stdin;


    while (1) {
        int molt = 0;
        istruzione = GetOrder(fp);
        if (istruzione.par == 'q') {
            break;
        }
        molt = istruzione.p2 / dim + 1;
        if (dim < istruzione.p2) {
            Array = Reallocation2D(Array, dim, molt);
            dim = dim * molt;
        }
        interpreter(istruzione, Array, fp);
    }
    int i;
    for(i=0;i<dim;i++){
        //printf("%s\n",Array[i]);
   }

    free(Array);

    return 0;
}
